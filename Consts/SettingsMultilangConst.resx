<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BrowserSettingsItemTitle" xml:space="preserve">
    <value>Browser</value>
  </data>
  <data name="CommandSettingsItemContent" xml:space="preserve">
    <value>Copy the ADB command to create a "chrome-command-line" file</value>
  </data>
  <data name="CommandSettingsItemTitle" xml:space="preserve">
    <value>Adb Command</value>
  </data>
  <data name="ExtraArgsEntryPlaceholder" xml:space="preserve">
    <value>Additional injected startup args, empty by default</value>
  </data>
  <data name="ExtraArgsEntryTooltip" xml:space="preserve">
    <value>Tap to edit the Additional injected startup args</value>
  </data>
  <data name="ExtraArgsSettingsItemTitle" xml:space="preserve">
    <value>Extra Args</value>
  </data>
  <data name="LangOptionPickerTitle" xml:space="preserve">
    <value>Select a UI l10n language</value>
  </data>
  <data name="LangOptionPickerTooltip" xml:space="preserve">
    <value>Tap to open a language selection pop-up</value>
  </data>
  <data name="LangOptionSettingsItemTitle" xml:space="preserve">
    <value>Lang L10n</value>
  </data>
  <data name="LinkSettingsItemContent" xml:space="preserve">
    <value>Copy the link to toggle the "Enable command line on non-rooted devices" option in a browser</value>
  </data>
  <data name="LinkSettingsItemTitle" xml:space="preserve">
    <value>Flag Link</value>
  </data>
  <data name="SearchEnabledSettingsItemContent" xml:space="preserve">
    <value>Control whether to enable the host search feature (The search icon has a difficult-to-fix color issue in light mode. You can disable this option to hide it)</value>
  </data>
  <data name="SearchEnabledSettingsItemTitle" xml:space="preserve">
    <value>Host Search</value>
  </data>
  <data name="SearchEnabledSwitchTooltip" xml:space="preserve">
    <value>Tap to toggle the search feature on / off</value>
  </data>
  <data name="ThemeColorPickerTitle" xml:space="preserve">
    <value>Select a UI color flavor</value>
  </data>
  <data name="ThemeColorPickerTooltip" xml:space="preserve">
    <value>Tap to open a flavor color selection pop-up</value>
  </data>
  <data name="ThemeColorSettingsItemTitle" xml:space="preserve">
    <value>Flavor Color</value>
  </data>
  <data name="ThemeStatePickerTitle" xml:space="preserve">
    <value>Select a UI theme state</value>
  </data>
  <data name="ThemeStatePickerTooltip" xml:space="preserve">
    <value>Tap to open a theme state selection pop-up</value>
  </data>
  <data name="ThemeStateSettingsItemTitle" xml:space="preserve">
    <value>Theme State</value>
  </data>
  <data name="UpdateHostEnabledSettingsItemContent" xml:space="preserve">
    <value>Control whether to check host for update automatically on startup</value>
  </data>
  <data name="UpdateHostEnabledSettingsItemTitle" xml:space="preserve">
    <value>Check Host For Update</value>
  </data>
  <data name="UpdateHostEnabledSwitchTooltip" xml:space="preserve">
    <value>Tap to toggle the auto check host for update feature on / off</value>
  </data>
  <data name="UpdateSoftwareEnabledSettingsItemContent" xml:space="preserve">
    <value>Control whether to check software for update automatically on startup</value>
  </data>
  <data name="UpdateSoftwareEnabledSettingsItemTitle" xml:space="preserve">
    <value>Check Software For Update</value>
  </data>
  <data name="UpdateSoftwareEnabledSwitchTooltip" xml:space="preserve">
    <value>Tap to toggle the auto check software for update feature on / off</value>
  </data>
  <data name="UpstreamMirrorEnabledSettingsItemContent" xml:space="preserve">
    <value>Control whether to use mirror to update automatically if host update fails (Only available for Github or Gitlab host source)</value>
  </data>
  <data name="UpstreamMirrorEnabledSettingsItemTitle" xml:space="preserve">
    <value>Select Host Source Mirror</value>
  </data>
  <data name="UpstreamMirrorEnabledSwitchTooltip" xml:space="preserve">
    <value>Tap to toggle the auto select host source mirror feature on / off</value>
  </data>
  <data name="UpstreamUrlEntryTooltip" xml:space="preserve">
    <value>Tap to edit the upstream host updating source</value>
  </data>
  <data name="UpstreamUrlSettingsItemTitle" xml:space="preserve">
    <value>Host Source</value>
  </data>
</root>